from tkinter import *
from tkinter import ttk
import random
import time
import datetime
from tkinter import messagebox
import mysql.connector
class Hospital:
    def __init__(self, root): #Titling Window
        self.root = root
        self.root.title('NMC Prescription Management System')
        self.root.geometry('1540x800+0+0') # width and length of windows and origin
        self.root.configure(background='powder blue')

        self.Nameoftablets = StringVar()
        self.ref = StringVar()
        self.Dose = StringVar()
        self.NumberofTablets=StringVar()
        self.Lot=StringVar()
        self.Issuedate=StringVar()
        self.ExpDate = StringVar()
        self.DailyDose = StringVar()
        self.sideEffect = StringVar()
        self.FurtherInformation = StringVar()
        self.StorageAdvice = StringVar()
        self.DrivingUsingMachine = StringVar()
        self.HowToUseMedication = StringVar()
        self.CNICId = StringVar()
        self.CMSId = StringVar()
        self.PatientName = StringVar()
        self.DateofBirth = StringVar()
        self.PatientAddress = StringVar()

        lbltitle = Label(self.root, bd=20, relief=RIDGE, text='NMC PRESCRIPTION MANAGEMENT SYSTEM', fg='dark blue',
                         bg='white', font=('Times New Roman', 50, 'bold'))
        lbltitle.pack(side=TOP, fill=X)

        #-------------------------DATA FRAME--------------------------------------#
        Dataframe = Frame(self.root, bd = 20, relief = RIDGE,)
        Dataframe.place(x=0, y=130, width=1530, height =400)

        DataframeLeft = LabelFrame(Dataframe, bd=10, relief = RIDGE, padx=10, font=('Arial', 12, 'bold'), text = "Patient Information")
        DataframeLeft.place(x=0, y=5, width = 980, height =350)

        DataframeRight = LabelFrame(Dataframe, bd=10, relief=RIDGE, padx=10, font=('Arial', 12, 'bold'),
                                   text="Prescription")
        DataframeRight.place(x=990, y=5, width=460, height=350)


        #-------------------------BUTTON FRAME--------------------------------------#
        Buttonframe = Frame(self.root, bd = 20, relief = RIDGE,)
        Buttonframe.place(x=0, y=530, width=1530, height =70)

        #-------------------------DETAILS FRAME--------------------------------------#
        Detailsframe = Frame(self.root, bd = 20, relief = RIDGE,)
        Detailsframe.place(x=0, y=600, width=1530, height =190)

        #-------------------------DataframeLeft--------------------------------------#
        lblnameTablet = Label(DataframeLeft, text = 'Names of Tablet',font=('Arial', 12, 'bold'), padx = 2, pady = 6)
        lblnameTablet.grid(row = 0, column = 0, sticky = W)
        # comNametablet = ttk.Combobox(DataframeLeft,textvariable=self.Nameoftablets, font=('Arial', 12, 'bold'), width = 33)
        comNametablet = ttk.Combobox(DataframeLeft,textvariable = self.Nameoftablets,state = 'readonly', font = ('arial',12, 'bold'),width = 33)
        comNametablet["values"]=('Postan', 'Aranic', 'Flagl', 'Risek', 'Entamizole')
        comNametablet.grid(row = 0, column = 1)

        lblref = Label(DataframeLeft, font=('Arial', 12, 'bold'), text = 'Reference No:', padx = 2)
        lblref.grid(row = 1, column = 0, sticky = W)
        txtref = Entry (DataframeLeft, font=('Arial', 13, 'bold'),textvariable=self.ref, width = 35)
        txtref.grid(row = 1, column = 1)

        lblDose = Label(DataframeLeft, font=('Arial', 12, 'bold'), text = 'Dose:', padx = 2, pady = 4)
        lblDose.grid(row = 2, column = 0, sticky = W)
        txtDose = Entry(DataframeLeft, font=('Arial', 13, 'bold'),textvariable=self.Dose, width = 35)
        txtDose.grid(row = 2, column = 1)

        lblNoOftablets = Label(DataframeLeft, font=('Arial', 12, 'bold'), text = 'No of Tablets', padx = 2, pady = 6)
        lblNoOftablets.grid(row = 3, column = 0, sticky = W)
        txtNoOftablets = Entry(DataframeLeft, font=('Arial', 13, 'bold'),textvariable=self.NumberofTablets, width = 35)
        txtNoOftablets.grid(row = 3, column = 1)

        lblLot = Label(DataframeLeft, font=('Arial', 12, 'bold'), text = 'Lot:', padx = 2, pady = 6)
        lblLot.grid(row = 4, column = 0, sticky = W)
        txtLot = Entry(DataframeLeft, font=('Arial', 13, 'bold'),textvariable=self.Lot, width = 35)
        txtLot.grid(row = 4, column = 1)

        lblIssueDate = Label(DataframeLeft, font=('Arial', 12, 'bold'), text = 'Issue Date:', padx = 2, pady = 6)
        lblIssueDate.grid(row = 5, column = 0, sticky = W)
        txtIssueDate = Entry(DataframeLeft, font=('Arial', 13, 'bold'),textvariable=self.Issuedate,width = 35)
        txtIssueDate.grid(row = 5, column = 1)

        lblExpDate = Label(DataframeLeft, font=('Arial', 12, 'bold'), text = 'Exp Date:', padx = 2, pady = 6)
        lblExpDate.grid(row = 6, column = 0, sticky = W)
        txtExpDate = Entry(DataframeLeft, font=('Arial', 13, 'bold'),textvariable=self.ExpDate, width = 35)
        txtExpDate.grid(row = 6, column = 1)

        lblDailyDose = Label(DataframeLeft, font=('Arial', 12, 'bold'), text = 'Daily Dose:', padx = 2, pady = 6)
        lblDailyDose.grid(row = 7, column = 0, sticky = W)
        txtDailyDose = Entry(DataframeLeft, font=('Arial', 13, 'bold'),textvariable=self.DailyDose, width = 35)
        txtDailyDose.grid(row = 7, column = 1)

        lblSideEffects = Label(DataframeLeft, font=('Arial', 12, 'bold'), text = 'Side Effects:', padx = 2, pady = 6)
        lblSideEffects.grid(row = 8, column = 0, sticky = W)
        txtSideEffects = Entry(DataframeLeft, font=('Arial', 13, 'bold'),textvariable=self.sideEffect, width = 35)
        txtSideEffects.grid(row = 8, column = 1)

        lblFurtherinfo = Label(DataframeLeft, font=('Arial', 12, 'bold'), text = 'Further Information:', padx = 2)
        lblFurtherinfo.grid(row = 0, column = 2, sticky = W)
        txtFurtherinfo = Entry(DataframeLeft, font=('Arial', 13, 'bold'),textvariable=self.FurtherInformation, width = 35)
        txtFurtherinfo.grid(row = 0, column = 3)

        lblBloodPressure = Label(DataframeLeft, font=('Arial', 12, 'bold'), text = 'Daily Dose:', padx = 2, pady = 6)
        lblBloodPressure.grid(row = 1, column = 2, sticky = W)
        txtBloodPressure = Entry(DataframeLeft, font=('Arial', 13, 'bold'),textvariable=self.DailyDose, width = 35)
        txtBloodPressure.grid(row = 1, column = 3)

        lblDrivingMachine = Label(DataframeLeft, font=('Arial', 12, 'bold'), text = 'Blood Pressure:', padx = 2, pady = 6)
        lblDrivingMachine.grid(row = 1, column = 2, sticky = W)
        txtDrivingMachine = Entry(DataframeLeft, font=('Arial', 13, 'bold'),textvariable=self.DrivingUsingMachine, width = 35)
        txtDrivingMachine.grid(row = 1, column = 3)


        lblStorage = Label(DataframeLeft, font=('Arial', 12, 'bold'), text = 'Storage Advice:', padx = 2, pady = 6)
        lblStorage.grid(row = 2, column = 2, sticky = W)
        txtStorage = Entry(DataframeLeft, font=('Arial', 13, 'bold'),textvariable=self.StorageAdvice, width = 35)
        txtStorage.grid(row = 2, column = 3)

        lblMedicine = Label(DataframeLeft, font=('Arial', 12, 'bold'), text = 'Medication:', padx = 2, pady = 6)
        lblMedicine.grid(row = 3, column = 2, sticky = W)
        txtMedicine = Entry(DataframeLeft, font=('Arial', 13, 'bold'),textvariable=self.HowToUseMedication, width = 35)
        txtMedicine.grid(row = 3, column = 3)

        lblPatientId = Label(DataframeLeft, font=('Arial', 12, 'bold'), text = 'CNIC No:', padx = 2, pady = 6)
        lblPatientId.grid(row = 4, column = 2, sticky = W)
        txtPatientId = Entry(DataframeLeft, font=('Arial', 13, 'bold'),textvariable=self.CNICId, width = 35)
        txtPatientId.grid(row = 4, column = 3)

        lblCmsNumber = Label(DataframeLeft, font=('Arial', 12, 'bold'), text = 'CMS No:', padx = 2, pady = 6)
        lblCmsNumber.grid(row = 5, column = 2, sticky = W)
        txtCmsNumber = Entry(DataframeLeft, font=('Arial', 13, 'bold'),textvariable=self.CMSId, width = 35)
        txtCmsNumber.grid(row = 5, column = 3)

        lblPatientname = Label(DataframeLeft, font=('Arial', 12, 'bold'), text = 'Patient Name:', padx = 2, pady = 6)
        lblPatientname.grid(row = 6, column = 2, sticky = W)
        txtPatientname = Entry(DataframeLeft, font=('Arial', 13, 'bold'),textvariable=self.PatientName, width = 35)
        txtPatientname.grid(row = 6, column = 3)

        lblDateOfBirth = Label(DataframeLeft, font=('Arial', 12, 'bold'), text = 'Date of Birth:', padx = 2, pady = 6)
        lblDateOfBirth.grid(row = 7, column = 2, sticky = W)
        txtDateOfBirth = Entry(DataframeLeft, font=('Arial', 13, 'bold'),textvariable=self.DateofBirth, width = 35)
        txtDateOfBirth.grid(row = 7, column = 3)

        lblPatientAddress = Label(DataframeLeft, font=('Arial', 12, 'bold'), text = 'Patient Address', padx = 2, pady = 6)
        lblPatientAddress.grid(row = 8, column = 2, sticky = W)
        txtPatientAddress = Entry(DataframeLeft, font=('Arial', 13, 'bold'),textvariable=self.PatientAddress, width = 35)
        txtPatientAddress.grid(row = 8, column = 3)

    # -------------------------DataframeRight--------------------------------------#
        self.txtPrescription = Text(DataframeRight, font=('Arial', 12, 'bold'), width =45, height =16, padx = 2, pady = 6)
        self.txtPrescription.grid(row = 0 , column = 0)
    # -------------------------NEW Buttons--------------------------------------#
        btnPrescription = Button(Buttonframe,command=self.iPrescription, text='Prescription', bg='green', fg='white', font=('Arial', 12, 'bold'), width=23,)
        btnPrescription.grid(row=0, column=0)

        btnPrescriptionData = Button(Buttonframe,command=self.iPrescriptionData(), text='Prescription Data', bg='green', fg='white', font=('Arial', 12, 'bold'), width=23,)
        btnPrescriptionData.grid(row=0, column=1)

        btnUpdate = Button(Buttonframe,command=self.update,text='Update', bg='green', fg='white', font=('Arial', 12, 'bold'), width=23,)
        btnUpdate.grid(row=0, column=2)

        btnDelete = Button(Buttonframe,command=self.idelete, text='Delete', bg='green', fg='white', font=('Arial', 12, 'bold'), width=23,)
        btnDelete.grid(row=0, column=3)

        btnClear = Button(Buttonframe,command=self.clear, text='Clear', bg='green', fg='white', font=('Arial', 12, 'bold'), width=23,)
        btnClear.grid(row=0, column=4)

        btnExit = Button(Buttonframe,command= self.iExit, text='Exit', bg='green', fg='white', font=('Arial', 12, 'bold'), width=23,)
        btnExit.grid(row=0, column=5)



        # -------------------------Table--------------------------------------#
    # -------------------------Scrollbar--------------------------------------#
        scroll_x = ttk.Scrollbar(Detailsframe, orient = HORIZONTAL)
        scroll_y = ttk.Scrollbar(Detailsframe, orient = VERTICAL)
        self.hospital_table = ttk.Treeview(Detailsframe, column = ('NameofTable', 'Ref', 'Dose', 'NoofTablets', 'Lot', 'IssueDate', 'ExpDate','DailyDose', 'Storage', 'CMS No.', 'Pname', 'DoB', 'Address'), xscrollcommand = scroll_x.set,yscrollcommand = scroll_y.set)

        scroll_x.pack(side = BOTTOM, fill = X)
        scroll_y.pack(side = RIGHT, fill = Y)

        scroll_x = ttk.Scrollbar(command = self.hospital_table.xview())
        scroll_y = ttk.Scrollbar(command = self.hospital_table.yview())

        self.hospital_table.heading('NameofTable', text = 'Name of Tablet')
        self.hospital_table.heading('Ref', text = 'Reference No.')
        self.hospital_table.heading('Dose', text = 'Dose')
        self.hospital_table.heading('NoofTablets', text = 'No of Tablets')
        self.hospital_table.heading('Lot', text = 'Lot')
        self.hospital_table.heading('IssueDate', text = 'Issue Date')
        self.hospital_table.heading('ExpDate', text = 'Exp Date')
        self.hospital_table.heading('DailyDose', text = 'Daily Dose')
        self.hospital_table.heading('Storage', text = 'Storage')
        self.hospital_table.heading('CMS No.', text = 'CMS Number')
        self.hospital_table.heading('Pname', text = 'Patient Name')
        self.hospital_table.heading('DoB', text = 'DoB')
        self.hospital_table.heading('Address', text = 'Address')

        self.hospital_table['show']='headings'

        self.hospital_table.column('NameofTable', width=100)
        self.hospital_table.column('Ref', width=100)
        self.hospital_table.column('Dose', width=100)
        self.hospital_table.column('NoofTablets', width=100)
        self.hospital_table.column('Lot', width=100)
        self.hospital_table.column('IssueDate', width=100)
        self.hospital_table.column('ExpDate', width=100)
        self.hospital_table.column('DailyDose', width=100)
        self.hospital_table.column('Storage', width=100)
        self.hospital_table.column('CMS No.', width=100)
        self.hospital_table.column('Pname', width=100)
        self.hospital_table.column('DoB', width=100)
        self.hospital_table.column('Address', width=100)

        self.hospital_table.pack(fill=BOTH, expand=1)

        # self.hospital_table.bind("<ButtonRelease-1>",self.get_cursor())

        self.fetch_data()




    #============================Functionality Declaration=========================================

    def iPrescriptionData(self):
        if self.Nameoftablets.get()=="" or self.ref.get()=="":
            messagebox.showerror("Error","All fields are required")

        else:
            conn=mysql.connector.connect(host="localhost",username="root",password="Test@123",database="mydata")
            my_cursor=conn.cursor()
            my_cursor.execute('insert into hospital values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)',
                                                                                                    (self.Nameoftablets.get(),
                                                                                                     self.ref.get(),
                                                                                                     self.NumberofTablets.get(),
                                                                                                     self.Lot.get(),
                                                                                                     self.Issuedate.get(),
                                                                                                     self.ExpDate.get(),
                                                                                                     self.DailyDose.get(),
                                                                                                     self.StorageAdvice.get(),
                                                                                                     self.CMSId.get(),
                                                                                                     self.PatientName.get(),
                                                                                                     self.DateofBirth.get(),
                                                                                                     self.PatientAddress.get()))

            conn.commit()
            self.fetch_data()
            conn.close()
            messagebox.showinfo("Success","Record has been inserted")


    def update(self):
        pass
        conn = mysql.connector.connect(host="localhost", username="root", password="Test@123", database="mydata")
        my_cursor = conn.cursor()
        my_cursor.execute("update hospital set NameOftablets=%s,dose=%s,issuedate=%s,lot=%s,expdate=%s,storage=%s,dailydose=%s,NumberofTablets=%s,CMSnumber=%s,patientname=%s,DOB=%s,patientaddress=%s where Reference_No=%s",(

            self.Nameoftablets.get(),
            self.Dose.get(),
            self.Issuedate.get(),
            self.Lot.get(),
            self.ExpDate.get(),
            self.StorageAdvice.get(),
            self.DailyDose.get(),
            self.NumberofTablets.get(),
            self.CMSId.get(),
            self.PatientName.get(),
            self.DateofBirth.get(),
            self.PatientAddress.get(),
            self.ref.get(),
        ))








    def fetch_data(self):
        conn = mysql.connector.connect(host="localhost", username="root", password="Test@123", database="mydata")
        my_cursor = conn.cursor()
        my_cursor.execute("select * from hospital")
        rows=my_cursor.fetchall()
        if len(rows)!=0:
            self.hospital_table.delete(*self.hospital_table.get_children())
            for i in rows:
                self.hospital_table.insert("",END,values=i)
            conn.commit()
        conn.close()

    def get_cursor(self,event=""):
        cursor_row=self.hospital_table.focus()
        content=self.hospital_table.item(cursor_row)
        row=content["values"]
        self.Nameoftablets.set(row[0])
        self.ref.set(row[1])
        self.Dose.set(row[2])
        self.NumberofTablets.set(row[3])
        self.Lot.set(row[4])
        self.Issuedate.set(row[5])
        self.ExpDate.set(row[6])
        self.DailyDose.set(row[7])
        self.StorageAdvice.set(row[8])
        self.CMSId.set(row[9])
        self.PatientName.set(row[10])
        self.DateofBirth.set(row[11])
        self.PatientAddress.set(row[12])




    def iPrescription(self):
        self.txtPrescription.insert(END,"Name of Tablets:\t\t\t"+self.Nameoftablets.get()+"\n")
        self.txtPrescription.insert(END, "Reference No:\t\t\t" + self.ref.get() + "\n")
        self.txtPrescription.insert(END, "Dose:\t\t\t" + self.Dose.get() + "\n")
        self.txtPrescription.insert(END, "No of Tablets:\t\t\t" + self.NumberofTablets.get() + "\n")
        self.txtPrescription.insert(END, "Lot:\t\t\t" + self.Lot.get() + "\n")
        self.txtPrescription.insert(END, "Issue Date:\t\t\t" + self.Issuedate.get() + "\n")
        self.txtPrescription.insert(END, "Expiry Date:\t\t\t" + self.ExpDate.get() + "\n")
        self.txtPrescription.insert(END, "Daily Dose:\t\t\t" + self.DailyDose.get() + "\n")
        self.txtPrescription.insert(END, "Side Effect:\t\t\t" + self.sideEffect.get() + "\n")
        self.txtPrescription.insert(END, "Further Info:\t\t\t" + self.FurtherInformation.get() + "\n")
        self.txtPrescription.insert(END, "Storage Advice:\t\t\t" + self.StorageAdvice.get() + "\n")
        self.txtPrescription.insert(END, "Driving Using Machine:\t\t\t" + self.DrivingUsingMachine.get() + "\n")
        self.txtPrescription.insert(END, "Patient ID:\t\t\t" + self.CNICId.get() + "\n")
        self.txtPrescription.insert(END, "CMS ID:\t\t\t" + self.CMSId.get() + "\n")
        self.txtPrescription.insert(END, "Patient Name:\t\t\t" + self.PatientName.get() + "\n")
        self.txtPrescription.insert(END, "Date of Birth:\t\t\t" + self.DateofBirth.get() + "\n")
        self.txtPrescription.insert(END, "Patient Address:\t\t\t" + self.PatientAddress.get() + "\n")

    def idelete(self):
        conn = mysql.connector.connect(host="localhost", username="root", password="Test@123", database="mydata")
        my_cursor = conn.cursor()
        query="delete from hospital where Reference_No=%s"
        value=(self.ref.get(),)
        my_cursor.execute(query,value)

        conn.commit()
        conn.close()
        self.fetch_data()
        messagebox.showinfo("Delete","Patient has been deleted successfully")

    def clear(self):
        self.Nameoftablets.set("")
        self.ref.set("")
        self.Dose.set("")
        self.NumberofTablets.set("")
        self.Lot.set("")
        self.Issuedate.set("")
        self.ExpDate.set("")
        self.DailyDose.set("")
        self.sideEffect.set("")
        self.FurtherInformation.set("")
        self.StorageAdvice.set("")
        self.DrivingUsingMachine.set("")
        self.HowToUseMedication.set("")
        self.CNICId.set("")
        self.CMSId.set("")
        self.PatientName.set("")
        self.DateofBirth.set("")
        self.PatientAddress.set("")
        self.txtPrescription.delete("1.0",END)

    def iExit(self):
        iExit=messagebox.askyesno("Hospital management System","Confirm you want to exit")
        if iExit>0:
            root.destroy()
            return



root=Tk()
ob = Hospital(root)
root.mainloop()


